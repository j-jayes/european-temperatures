---
title: "Ingest and reshape"
format: html
---


## Purpose

I want to aggregate average temperature readings and perhaps precipitation for Europe at NUTS2 as well as Spain and Sweden at NUTS3 level from the gridded temperature data that is available from [berkeleyearth.org](https://berkeleyearth.org/data/).

### Planning

-   Import necessary libraries

-   Read in the .nc file and extract the temperature data

-   Read in the NUTS2 map data

-   Convert the temperature data from 1 by 1 degree cells to NUTS2 level using the map

-   Aggregate the temperature data to NUTS2 level

-   Save the aggregated data to a new file


```{r}
# install.packages(c("ncdf4"))
# install.packages("exactextractr")
library(ncdf4)
library(sf)
library(raster)
library(tidyverse)
```

```{r}
# Read netCDF file
nc <- nc_open("data/Europe_TAVG_Gridded_1.nc")

# Read NUTS2 shapefile
nuts2_regions <- read_sf("data/regions_nuts2.shp")

# Convert nuts2_id to numeric
nuts2_regions <- nuts2_regions %>% 
  mutate(nuts_code_numeric = row_number())



```

```{r}
# Get the dimensions and variable
time_dim <- ncvar_get(nc, "time")
lon_dim <- ncvar_get(nc, "longitude")
lat_dim <- ncvar_get(nc, "latitude")
temp_var <- ncvar_get(nc, "temperature")

# Create a raster stack
raster_stack <- stack(lapply(1:length(time_dim), function(t) {
  raster(matrix(temp_var[, , t], nrow = length(lat_dim), ncol = length(lon_dim),
                byrow = TRUE, dimnames = list(lat_dim, lon_dim)), xmn = min(lon_dim), xmx = max(lon_dim),
                ymn = min(lat_dim), ymx = max(lat_dim), crs = "+proj=longlat +datum=WGS84")
}))

```

```{r}
# Rasterize the NUTS2 shapefile
nuts2_raster <- rasterize(nuts2_regions, raster_stack, field = "nuts_code_numeric")

```


```{r}
# Function to aggregate data to NUTS2 regions
# Function to aggregate data to NUTS2 regions
aggregate_temp_to_nuts2 <- function(r) {
  temp_data <- mask(r, nuts2_raster)
  all_nuts2_ids <- unique(values(nuts2_raster))
  temp_means <- tapply(values(temp_data), values(nuts2_raster), mean, na.rm = TRUE)
  data_frame(nuts2_id = all_nuts2_ids,
             mean_temp = temp_means[all_nuts2_ids])
}


# Apply the function to the raster stack
nuts2_temp_df <- lapply(1:nlayers(raster_stack), function(i) {
  aggregate_temp_to_nuts2(raster_stack[[i]])
}) %>%
  bind_rows(.id = "time_chunk") %>%
  mutate(time_chunk = as.integer(time_chunk))

```

```{r}
write_csv(nuts2_temp_df, "data/aggregated_temperature_nuts2.csv")

```

```{r}
# Extract the first time period data
first_time_period <- nuts2_temp_df %>% filter(time_chunk == 1)

# Merge with the NUTS2 shapefile
nuts2_regions_temp <- nuts2_regions %>%
  left_join(first_time_period, by = c("nuts_code_numeric" = "nuts2_id"))

```

```{r}
# Load required libraries
library(ggplot2)
library(sf)

# Create a choropleth map
choropleth_map <- ggplot() +
  geom_sf(data = nuts2_regions_temp, aes(fill = mean_temp), size = 0.2) +
  scale_fill_viridis_c(option = "plasma", na.value = "grey50",
                       name = "Mean Temperature") +
  theme_minimal() +
  theme(legend.position = "bottom",
        legend.key.width = unit(2, "cm"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  ggtitle("Mean Temperature for NUTS2 Regions - First Time Period")

# Plot the choropleth map
print(choropleth_map)

```

## Function

```{r}
create_choropleth_map <- function(nuts2_shapefile, temp_data, time_period) {
  # Merge the temperature data for the given time period with the NUTS2 shapefile
  nuts2_regions_temp <- nuts2_shapefile %>%
    left_join(temp_data %>% filter(time_chunk == time_period), by = c("nuts_code_numeric" = "nuts2_id"))
  
  # Create a choropleth map
  choropleth_map <- ggplot() +
    geom_sf(data = nuts2_regions_temp, aes(fill = mean_temp), size = 0.2) +
    scale_fill_viridis_c(option = "plasma", na.value = "grey50",
                         name = "Mean Temperature") +
    theme_minimal() +
    theme(legend.position = "bottom",
          legend.key.width = unit(2, "cm"),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank()) +
    ggtitle(paste("Mean Temperature for NUTS2 Regions - Time Period", time_period))
  
  return(choropleth_map)
}

```


```{r}
# Create a choropleth map for time period 1
map_time_period_1 <- create_choropleth_map(nuts2_regions, nuts2_temp_df, time_period = 1)
print(map_time_period_1)

# Create a choropleth map for time period 10
map_time_period_10 <- create_choropleth_map(nuts2_regions, nuts2_temp_df, time_period = 10)
print(map_time_period_10)

map_time_period_1000 <- create_choropleth_map(nuts2_regions, nuts2_temp_df, time_period = 1000)
print(map_time_period_1000)
```


## join dates

```{r}
# Create a date mapping data frame
start_date <- as.Date("1850-01-01")
date_mapping <- data_frame(time_chunk = 1:2077,
                           date = seq(from = start_date, by = "month", length.out = 2077))

# Join the dates with the time period numbers
nuts2_temp_df_with_dates <- nuts2_temp_df %>%
  left_join(date_mapping, by = "time_chunk")

```


```{r}
create_choropleth_map <- function(nuts2_shapefile, temp_data, time_period) {
  # Merge the temperature data for the given time period with the NUTS2 shapefile
  nuts2_regions_temp <- nuts2_shapefile %>%
    left_join(temp_data %>% filter(time_chunk == time_period), by = c("nuts_code_numeric" = "nuts2_id"))
  
  # Extract the date for the given time period
  time_period_date <- temp_data %>% filter(time_chunk == time_period) %>% pull(date) %>% first()
  
  # Create a choropleth map
  choropleth_map <- ggplot() +
    geom_sf(data = nuts2_regions_temp, aes(fill = mean_temp), size = 0.2) +
    scale_fill_viridis_c(option = "plasma", na.value = "grey50",
                         name = "Mean Temperature") +
    theme_minimal() +
    theme(legend.position = "bottom",
          legend.key.width = unit(2, "cm"),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank()) +
    ggtitle(paste("Mean Temperature for NUTS2 Regions -", format(time_period_date, "%Y-%m")))
  
  return(choropleth_map)
}

```

```{r}
map_time_period_1000 <- create_choropleth_map(nuts2_regions, nuts2_temp_df_with_dates, time_period = 1900)
print(map_time_period_1000)
```


